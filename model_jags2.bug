model {
    b0 ~ dnorm(0, 1)
    b1 ~ dunif(5, 25)
        
    
    # dbh likelihood
    for(j in 1:nDBH) {
        # -1 is for begin of grow season
        logDobs[j] ~ dt(log(D[dbh_tree_id[j], dbh_year_id[j]-1] + 
                                exp(b0 + b1*(dbh_day_id[j] - 0.5)) /
                                (1 + exp( b0 + b1*(dbh_day_id[j] - 0.5)  )) *
                                    X[dbh_tree_id[j], dbh_year_id[j]]/10),
                            tau_d_obs, 3)
    }

    # increment likelihood for trees with rings
    for(i in 1:nWidths) {
        logXobs[i] ~ dnorm(log(X[incr_tree_id[i], incr_year_id[i]]), tau_x_obs)
    }

#    # constraint on trees not yet appearing in a census
#    for(i in 1:nSaplings) {
#        sapling_ind[i] <- D[sapling_tree_id[i], sapling_year_id[i]] < max_size[i]
#        sapling_constraint[i] ~ dconstraint(sapling_ind[i])
#    }

    # process evolution
    for(i in 1:n) {
        D0[i] ~ dunif(-200, 300)
        D[i, 1] <- D0[i] + X[i, 1]/10

        mnX[i, 1] <- beta[i] + beta_slope * (D0[i] - openDBH) * (D0[i] > openDBH) + beta_t[1]
        for(j in 2:last_time[i]) {
            mnX[i, j] <- beta[i] + beta_slope * (D[i, j-1] - openDBH) * (D[i, j-1] > openDBH) + beta_t[j]
        }
        for(j in 1:last_time[i]) {
            X[i, j] ~ dlnorm(mnX[i, j], tau_x)
        }
        for(j in (last_time[i]+1):nT) {
            # BUGS (and NIMBLE by default) should ignore if
            # indexing is decreasing
            X[i, j] <- 0
        }
        
        for(j in 2:nT) {
            D[i, j] <- D[i, j-1] + X[i, j]/10
        }
        beta[i] ~ dnorm(beta_spp[taxon[i]], beta_tau)
         
    }
    for(j in 1:nTaxa) {
        beta_spp[j] ~ dnorm(beta0, beta_spp_tau)
    }

    for(j in 1:nT) {
        beta_t[j] ~ dnorm(0, beta_t_tau)
    }
    tau_x_obs <- 1/(sig_x_obs * sig_x_obs)
    tau_d_obs <- 1/(sig_d_obs * sig_d_obs)
    beta_t_tau <- 1/(beta_t_sd * beta_t_sd)    
    beta_spp_tau <- 1/(beta_spp_sd * beta_spp_sd)
    beta_tau <- 1/(beta_sd * beta_sd)
    tau_x <- 1/(sig_x * sig_x)

    beta0 ~ dnorm(0, .00001)
    beta_slope ~ dunif(0, .3)
    sig_d_obs ~ dunif(0, 1000)
    sig_x_obs ~ dunif(0, 1000)

    sig_x ~ dunif(0, 1000)
    beta_sd ~ dunif(0, 1000)
    beta_t_sd ~ dunif(0, 1000)
    beta_spp_sd ~ dunif(0, 1000)
}
